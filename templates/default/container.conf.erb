description "Docker service for <%= @name %>"
author "Docker Chef Cookbook"

start on filesystem and started docker
stop on runlevel [!2345]

# We don't want to TERM the `docker wait` process so we fake the signal 
# we send to it. The pre-stop script issues the `docker stop` command
# which causes the `docker attach` process to exit
kill signal CONT
 
# Due to a bug in upstart we need to set the modes we consider
# successful exists https://bugs.launchpad.net/upstart/+bug/568288
normal exit 0 CONT

script
  # try to remove the container, if it succeeds something went wrong in pre-start so exit non-zero
  docker rm <%= @name %> >/dev/null 2>&1 && exit 1
  # attach to the container and stream output to syslog
  exec docker attach <%= @name %> 2>&1 | logger -p local0.info -t <%= @app_name %>[<%=@c_type%>.<%= @c_num %>]
end script

pre-start script
  # TODO get clarification on the purpose of this line. looks like it attempts to clean up after a stopped docker container.
  docker rm <%= @name %> >/dev/null 2>&1 || true
  RUNTIME_DIR=/opt/deis/runtime
  set +e # inspect and is_not_running may fail, this is intentional to detect if container exists/is running
  INSPECT_OUT=`docker inspect <%= @name %>`
  # only execute docker run if the container is not running
  if [ $? = 0 ]; then
    echo $INSPECT_OUT | $RUNTIME_DIR/is_not_running.py
    # if it's already running, we don't need to do anything here.
    if [ $? = 1 ]; then
      exit 0 # TODO make sure this doesn't cause the 'script' stanza to not execute
    fi
  fi
  set -e
  docker run -d -name="<%= @name %>" -v <%= @slug_dir %>:/app -p <%= @port %>:<%= @port %> -e PORT=<%= @port %><% @env.each_pair do |k,v| %> -e <%= k.upcase %>='<%= v %>'<% end %> <%= @image %> start <%= @c_type %>
end script

pre-stop script
  docker stop <%= @name %> >/dev/null
  docker rm <%= @name %> >/dev/null
end script



